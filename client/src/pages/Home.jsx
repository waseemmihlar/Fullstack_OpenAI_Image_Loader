import React, { useState, useEffect } from "react";
import { Loader, Card, FormField } from "../components";

const RenderCard = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }
  return (
    <h2 className="font-bold text-[#0089c4] mt-5 text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searchedTextResult, setSearchedTextResult] = useState(null);
  const [searchedTimeOut, setSearchedTimeOut] = useState(null);

  useEffect(() => {
    setIsLoading(true);

    const fetchPosts = async () => {
      try {
        const response = await fetch("http://localhost:5000/api/v1/post", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (response.ok) {
          const posts = await response.json();
          setAllPosts(posts.data);
        }
      } catch (error) {
        alert(error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const searchHandleChange = (e) => {
    clearTimeout(searchedTimeOut);
    setSearchText(e.target.value);

    setSearchedTimeOut(
      setTimeout(() => {
        const result = allPosts.filter(
          (post) =>
            post.name.toLowerCase().includes(searchText.toLowerCase()) ||
            post.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        console.log(result);
        setSearchedTextResult(result);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[32px] text-[#222328]">
          The Community Showcase
        </h1>
        <p className="max-w-[500px] text-[16px] mt-2 text-[#666e75]">
          Browse through a collection of imaginative and visually stunning
          images generated by Image Ai
        </p>
      </div>
      <div className="mt-16">
        <FormField
          name="text"
          type="text"
          placeholder="Search your Images..."
          handleChange={searchHandleChange}
          labelName="Search Images"
          value={searchText}
        />
      </div>
      <div className="mt-10">
        {isLoading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="text-xl text-[#666e75] font-medium mb-3">
                Showing results for{" "}
                <span className="text-[#222328]">{searchText}</span>
              </h2>
            )}

            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCard
                  data={searchedTextResult}
                  title="No searched data found"
                />
              ) : (
                <RenderCard data={allPosts} title="No Post Found" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
